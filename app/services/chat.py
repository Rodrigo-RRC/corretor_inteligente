import os
from dotenv import load_dotenv
from openai import OpenAI
from app.core.estado_lead import (
    inicializar_lead, atualizar_estado, obter_estado,
    adicionar_ao_historico, obter_historico
)

# Carrega vari√°veis do .env
load_dotenv()
api_key = os.getenv("OPENAI_API_KEY")
client = OpenAI(api_key=api_key)

def obter_resposta(pergunta, lead_id):
    if obter_estado(lead_id) is None:
        inicializar_lead(lead_id)

    estado = obter_estado(lead_id)

    # PAUSA: aguardando comando de simula√ß√£o
    if estado == "aguardando_simulacao" and not pergunta.startswith("#resposta_simulacao:"):
        return "Certo! Assim que a simula√ß√£o estiver pronta, eu te aviso por aqui mesmo. üòâ"

    # COMANDO INTERNO: resposta da simula√ß√£o
    if pergunta.startswith("#resposta_simulacao:"):
        mensagem = pergunta.split(":", 2)[2]
        atualizar_estado(lead_id, "respondeu_simulacao")
        adicionar_ao_historico(lead_id, "assistant", mensagem)
        return mensagem

    # MONTA O PROMPT
    instrucoes_sistema = """
Voc√™ √© Bruna, uma agente virtual inteligente especializada em im√≥veis do programa Minha Casa Minha Vida. Seu papel √© coletar apenas as informa√ß√µes necess√°rias para uma simula√ß√£o de financiamento, sem parecer rob√¥, sendo cordial, objetiva e adapt√°vel conforme o contexto da conversa.

REGRAS DE CONDUTA:
- Nunca entregue o endere√ßo do im√≥vel (mencione apenas 'pr√≥ximo ao Bairro Geisel').
- Fa√ßa uma pergunta por vez e apenas quando necess√°rio.
- Mantenha a conversa fluida, como uma atendente humana treinada faria.
- Ap√≥s a coleta completa dos dados, os resultados da simula√ß√£o ser√£o enviados por voc√™ mesma (Bruna), sem repassar o atendimento ao corretor ainda.
- O corretor parceiro (Rodrigo) s√≥ assume o atendimento ap√≥s a visita ser confirmada por SMS.

ABERTURA DA CONVERSA:
Ol√°! Sou a Bruna, sua corretora virtual ‚Äî uma agente inteligente aqui pra te ajudar com im√≥veis do Minha Casa Minha Vida.

Este im√≥vel fica pr√≥ximo ao Bairro Geisel, tem 1 su√≠te + 1 quarto, √°rea de lazer completa, e est√° saindo a partir de R$ 178 mil.

Posso te ajudar de duas formas:

1Ô∏è‚É£ Ver se o im√≥vel combina com seu perfil  
2Ô∏è‚É£ Agendar uma visita (preciso antes fazer uma pr√©-an√°lise)

Responda com 1 ou 2, por favor üòä
"""

    if estado == "apresentacao":
       atualizar_estado(lead_id, "coletando_dados")
       return """Ol√°! Sou a Bruna, sua corretora virtual ‚Äî uma agente inteligente aqui pra te ajudar com im√≥veis do Minha Casa Minha Vida.

    Este im√≥vel fica pr√≥ximo ao Bairro Geisel, tem 1 su√≠te + 1 quarto, √°rea de lazer completa, e est√° saindo a partir de R$ 178 mil.

    Posso te ajudar de duas formas:

    1Ô∏è‚É£ Ver se o im√≥vel combina com seu perfil  
    2Ô∏è‚É£ Agendar uma visita (preciso antes fazer uma pr√©-an√°lise)

    Responda com 1 ou 2, por favor üòä"""


    mensagens = [{"role": "system", "content": instrucoes_sistema}]
    mensagens.extend(obter_historico(lead_id))
    mensagens.append({"role": "user", "content": pergunta})

    try:
        resposta = client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=mensagens,
            temperature=0.7
        )

        conteudo = resposta.choices[0].message.content.strip()

        adicionar_ao_historico(lead_id, "user", pergunta)
        adicionar_ao_historico(lead_id, "assistant", conteudo)

        # GATILHOS que disparam a pausa e mudam para aguardando_simulacao
        gatilhos_pausa = [
            "vou preparar uma simula√ß√£o",
            "vou calcular os valores e condi√ß√µes",
            "em seguida te passo as informa√ß√µes",
            "posso prosseguir com a simula√ß√£o",
            "vou calcular"
        ]

        if any(g in conteudo.lower() for g in gatilhos_pausa):
            atualizar_estado(lead_id, "aguardando_simulacao")
            return "Perfeito! J√° coletei tudo que preciso.\nVou preparar a simula√ß√£o com base nesses dados e te aviso por aqui mesmo assim que ela estiver pronta, tudo bem?"

        return conteudo

    except Exception as e:
        return f"Erro ao gerar resposta: {str(e)}"

